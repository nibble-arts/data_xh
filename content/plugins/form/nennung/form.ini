; field definition section
;
; scalar field:
;	fieldName = "string"
;
; input field:
;	fieldName = type@input
;
;	types:
;		input = text input field
;		checkbox = checkbox
;		radio = radiobuttons
;		select = select box
;
; A mandatory field is marked with a '>mandatory' at the end or the string
;	fieldName = "type>mandatory"

[fields]
region = "select>mandatory"
wettbewerb = "hidden>value=Regionalmeisterschaft"
klub = "select>mandatory"
author = "input>mandatory"
email = "input>mandatory"
address = "input>mandatory"
zip = "input>mandatory"
city = "input>mandatory"
land = "select>mandatory"
geburtsdatum = "input"
title = "input>mandatory"
time = "input>mandatory"
abstract = "textarea"
jugendfrei = "checkbox"
format = "radio>mandatory"
file = "radio"
ausschnitte = "checkbox"
accept = "checkbox>mandatory"

; source definition section
;
; _self:
;	The primary data for the fields.
;
; For linked field, like source or radiobuttons, an external source can be defined. It has to have the same fieldName.
;
; The source string format is:
;	query@source
;
; Queries
;	field=value
;		The values in a query string can be the value of another field, marked with the $ character before the fieldName. The source is loaded using an ajax call, when the referenced field has a value.
;
;	field=$fieldName
;
; The fields to be loaded from the external source are listed after a > character. The fields are returened in an array.
; The field content can be rendered in a format after an additional > character. In this case a string is returned for each entry. The fieldNames can be used in the format string encapsuled in curly breakets.
;	@source>field1,field2>Format as {field1}, {field2}

[source]
_self="file:$query"
region = "*@file:regionen>name,number>Region {number}"
klub = "region=$region@file:klubs>name,number>{name}|{number}"
land = "*@file:land>display"
format = "*@file:format>display"
file = "*@file:upload>display"

; input format check section
;
; For each field a input format check can be added, using the same fieldName. Two methods are available:
;	count:#		Check is positive, when the number of characters is reached.
;	regex:		Check is positive, when the regular expression is positive.

[check]
email = "regex:[^\.]+.[^\@]+@[^\.]+.[.*]+"
author = "count:3"
address = "count:3"
zip = "count:4"
city = "count:3"
title = "count:3"
time = "regex:[0-9]+"
